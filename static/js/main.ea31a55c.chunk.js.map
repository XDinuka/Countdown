{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Home","console","log","history","useHistory","useState","dateState","setDateState","timeState","setTimeState","onSubmit","event","preventDefault","time","Date","getTime","push","type","name","required","onChange","target","value","CounterPage","to","useParams","dateto","Number","parseInt","betweenState","setBetweenState","useEffect","setInterval","now","className","Counter","count","props","days","Math","floor","hours","mins","secs","mils","App","exact","path","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAuBA,SAASA,IACPC,QAAQC,IAAI,QACZ,IAAMC,EAAUC,cAChB,EAAkCC,mBAAS,MAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,mBAAS,MAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OACE,uBAAMC,SARa,SAACC,GACpBA,EAAMC,iBACN,IACMC,EADO,IAAIC,KAAJ,UAAYR,EAAZ,YAAyBE,IACpBO,UAClBZ,EAAQa,KAAR,WAAiBH,KAIjB,UACE,gDAGE,uBACEI,KAAK,OACLC,KAAK,SACLC,UAAU,EACVC,SAxBiB,SAACT,GACxBJ,EAAaI,EAAMU,OAAOC,UA0BxB,gDAGE,uBACEL,KAAK,OACLC,KAAK,SACLC,UAAU,EACVC,SA9BiB,SAACT,GACxBF,EAAaE,EAAMU,OAAOC,UAgCxB,wBAAQL,KAAK,SAAb,gCAKN,SAASM,IAAgBtB,QAAQC,IAAI,eACnC,IAAQsB,EAAOC,cAAPD,GACFE,EAAS,IAAIZ,KAAKa,OAAOC,SAASJ,IAExC,EAAwCnB,mBAAS,GAAjD,mBAAOwB,EAAP,KAAqBC,EAArB,KAWA,OATAC,qBAAU,WACJL,EAAOX,WAAY,IAAID,MAAOC,WAChCiB,aAAY,WACV,IAAMC,EAAM,IAAInB,KAChBgB,EAAgBJ,EAAOX,UAAYkB,EAAIlB,aACtC,MAIHc,EAAe,EACV,sBAAMK,UAAU,WAAhB,oCAGF,cAACC,EAAD,CAASC,MAAOP,IAGzB,SAASM,EAAQE,GAAQpC,QAAQC,IAAI,WACnC,IAAMoC,EAAOC,KAAKC,MAAMH,EAAMD,MAAN,OAClBK,EAAQF,KAAKC,MAAMH,EAAMD,MAAN,MAAyC,GAAPE,EACrDI,EAAOH,KAAKC,MAAMH,EAAMD,MAAN,KAAmD,IAArBK,EAAe,GAAPH,GACxDK,EAAOJ,KAAKC,MAAMH,EAAMD,MAAQ,KAA4C,IAAnCM,EAA6B,IAArBD,EAAe,GAAPH,IACzDM,EAAOL,KAAKC,MAAMH,EAAMD,OAA2D,KAAjDO,EAA2C,IAAnCD,EAA6B,IAArBD,EAAe,GAAPH,KAChE,OACE,sBAAKJ,UAAU,UAAf,UACE,+BAAOI,IAAY,wCACnB,+BAAOG,IAAa,yCACpB,+BAAOC,IAAY,2CACnB,+BAAOC,IAAY,2CACnB,+BAAOC,IAAY,kDAKVC,MApGf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC/C,EAAD,MAEF,cAAC,IAAD,CAAO+C,KAAK,OAAOC,SAAU,cAACzB,EAAD,YCLtB0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ea31a55c.chunk.js","sourcesContent":["import \"./App.css\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  useParams,\n  useHistory,\n} from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/:to\" children={<CounterPage />} />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction Home() {\n  console.log('Home')\n  const history = useHistory();\n  const [dateState, setDateState] = useState(null);\n  const [timeState, setTimeState] = useState(null);\n\n  const handleDateChange = (event) => {\n    setDateState(event.target.value);\n  };\n\n  const handleTimeChange = (event) => {\n    setTimeState(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const date = new Date(`${dateState},${timeState}`);\n    const time = date.getTime();\n    history.push(`/${time}`);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Select Date\n        </label>\n        <input\n          type=\"date\"\n          name=\"todate\"\n          required={true}\n          onChange={handleDateChange}\n        />\n\n      <label>\n        Select Time\n        </label>\n        <input\n          type=\"time\"\n          name=\"totime\"\n          required={true}\n          onChange={handleTimeChange}\n        />\n\n      <button type=\"submit\" >Start Countdown</button>\n    </form>\n  );\n}\n\nfunction CounterPage() { console.log('CounterPage')\n  const { to } = useParams();\n  const dateto = new Date(Number.parseInt(to));\n\n  const [betweenState, setBetweenState] = useState(0);\n\n  useEffect(() => {\n    if (dateto.getTime() > new Date().getTime()) {\n      setInterval(() => {\n        const now = new Date();\n        setBetweenState(dateto.getTime() - now.getTime());\n      }, 1);\n    }\n  });\n\n  if (betweenState < 1) {\n    return <span className=\"centered\">Countdown Has Expired!</span>;\n  }\n\n  return <Counter count={betweenState} />;\n}\n\nfunction Counter(props) {console.log('Counter')\n  const days = Math.floor(props.count / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(props.count / (1000 * 60 * 60)) - days * 24;\n  const mins = Math.floor(props.count / (1000 * 60)) - (hours + days * 24) * 60;\n  const secs = Math.floor(props.count / 1000) - (mins + (hours + days * 24) * 60) * 60;\n  const mils = Math.floor(props.count) - (secs + (mins + (hours + days * 24) * 60) * 60) * 1000;\n  return (\n    <div className=\"counter\">\n      <span>{days}</span><span>Days</span>\n      <span>{hours}</span><span>Hours</span>\n      <span>{mins}</span><span>Minutes</span>\n      <span>{secs}</span><span>Seconds</span>\n      <span>{mils}</span><span>Miliseconds</span>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}